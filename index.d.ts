/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export class ChiaBlockListener {
  constructor()
  addPeer(host: string, port: number, network_id: string): number
  disconnectPeer(peer_id: number): boolean
  start(blockCallback: (block: any) => void, eventCallback: (event: any) => void): void
  stop(): void
  isRunning(): boolean
  getConnectedPeers(): Array<number>
  getBlockByHeight(peer_id: number, height: number): Promise<any>
  discoverPeers(count?: number): Promise<Array<string>>
  sync(startHeight: number | undefined, blockCallback: (block: any) => void, eventCallback: (event: any) => void, syncStatusCallback: (status: any) => void): void
}

export class BlockIndexerNapi {
  static new(databaseUrl: string): Promise<BlockIndexerNapi>
  insertBlock(
    height: number,
    headerHash: string,
    prevHeaderHash: string,
    timestamp: number,
    additions: Array<{
      puzzle_hash: string;
      parent_coin_info: string;
      amount: string;
    }>,
    removals: Array<{
      puzzle_hash: string;
      parent_coin_info: string;
      amount: string;
    }>
  ): Promise<void>
  getCoinsByPuzzlehash(puzzleHash: string): Promise<Array<{
    coin_id: string;
    puzzle_hash: string;
    parent_coin_info: string;
    amount: string;
    created_height: number;
    spent_height?: number;
    is_spent: boolean;
  }>>
  getBalanceByPuzzlehash(puzzleHash: string): Promise<{
    puzzle_hash: string;
    total_amount: string;
    coin_count: number;
    last_updated_height: number;
  } | null>
  subscribeEvents(callback: (event: {
    type: 'coins_updated' | 'balance_updated';
    height: number;
    puzzle_hashes?: string[];
    additions?: Array<{
      coin_id: string;
      puzzle_hash: string;
      parent_coin_info: string;
      amount: string;
    }>;
    removals?: Array<{
      coin_id: string;
      puzzle_hash: string;
      parent_coin_info: string;
      amount: string;
    }>;
    updates?: Array<{
      puzzle_hash: string;
      old_amount: string;
      new_amount: string;
      old_coin_count: number;
      new_coin_count: number;
    }>;
  }) => void): void
  unsubscribeEvents(): void
}

export function initTracing(): void
